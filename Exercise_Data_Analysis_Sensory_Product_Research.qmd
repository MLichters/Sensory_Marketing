---
title-block-banner: true
title: "Sensory Marketing and Product Innovation"
subtitle: "Exercise 6 - Practicing Data Analysis in Sensory Product Research"
author: 
  - name: 
      given: Marcel
      family: Lichters
      non-dropping-particle: Prof. Dr.
    url: https://www.marketing.ovgu.de/
    email: marcel.lichters@ovgu.de
    corresponding: true
    affiliation: 
    - name: Otto-von-Guericke-University Magdeburg
      city: Magdeburg
      state: Saxony-Anhalt
      country: Germany
    affiliation-url: https://www.ovgu.de/en/
    orcid: 0000-0002-3710-2292
date: now
date-format: full
csl: apa-old-doi-prefix.csl
citation:
  language: "en"
  type: post
  url: https://rpubs.com/M_Lichters/smpiexercise6
  title: 'Sensory Marketing & Product Innovation: Exercise 6 - Practicing Data Analysis in Sensory Product Research'
appendix-cite-as: display
format:
  html:
    theme: cosmo
    toc: true
    toc-location: left
    code-fold: false
    code-link: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-tools: false
    code-copy: hover
    number-sections: true
    number-depth: 3
    citations-hover: true
    footnotes-hover: true
email-obfuscation: javascript
editor: source
bibliography: references.bib
editor_options: 
  chunk_output_type: console
google-scholar: true
copyright: 
  holder: Prof. Dr. Marcel Lichters
  year: 2023
---

------------------------------------------------------------------------

<a title="Follow me on ResearchGate" href="https://www.researchgate.net/profile/Marcel_Lichters?cp=shp"><img src="https://www.researchgate.net/images/public/profile_share_badge.png" alt="Follow me on ResearchGate"/></a>

[Connect with me on Open Science Framework](https://osf.io/u7hyz/) \| [Contact me via LinkedIn](https://www.linkedin.com/in/lichters/)

It might be necessary to use right-click -\> open in a new browser window depending on your machine*.*

------------------------------------------------------------------------

R analysis script presenting the solutions for exercise 6 in Sensory Marketing and Product Innovation

The purpose of this script does not solely lay in answering the exercise question. Moreover, studying these scripts should students make become familiar with some aspects of working in *R*.

::: callout-tip
## If this grabs your attention

If this exercise grabs your attention, please check out our master study programs at the Otto-von-Guericke-University in Magdeburg (Germany) by clicking on the logo!
:::

<a title="Faculty of Economics and Management at Otto-von-Guericke-University Magdeburg" href="https://www.ovgu.de/unimagdeburg/en/Master-p-48820.html"><img src="Signet_WW_3.jpg" alt="Faculty of Economics and Management at Otto-von-Guericke-University Magdeburg" width="600"/></a>

```{r}
#| include: false


#clear workspace
rm(list = ls())


#load packages
if (!"pacman" %in% rownames(installed.packages())) install.packages("pacman")

library(pacman)

pacman::p_load(haven, kableExtra, knitr, labelled, tidyverse, ggpubr, quarto, htmltools, pwr, compute.es)


```

# Loading packages

::: callout-important
## Beware!

*R* is a context-sensitive language. Thus, 'data' will be interpreted not in the same way as 'Data' will.
:::

In *R* most functionality is provided by additional packages.\
Most of the packages are well-documented, see: <https://cran.r-project.org/>

1.  The code chunk below first evaluates if the package [pacman](https://cran.r-project.org/web/packages/pacman/index.html) [@pacman] is already installed on your machine. If yes, the corresponding package will be loaded. If not, *R* will install the package.

2.  Alternatively, you can do this manually first by executing *install.packages("pacman")* and then *library(pacman)*.

3.  The second line then loads the package [pacman](https://cran.r-project.org/web/packages/pacman/index.html).

4.  The third line uses the function *p_load()* from the pacman package to install (if necessary) and loads all packages that we provide as arguments (e.g., [pwr](https://cran.r-project.org/web/packages/pwr/) [@pwr], which provides functions for statistical power calculations, or [sensR](https://cran.r-project.org/web/packages/sensR/ "Link to CRAN") [@sensR], which provides access to many functions usful in sensory product research).

```{r}
#| include: false


#clear workspace
rm(list = ls())


#load packages
if (!"pacman" %in% rownames(installed.packages())) install.packages("pacman")

library(pacman)

pacman::p_load(tidyverse, SensoMineR, sensR, pwr)

```

```{r}
#| eval: false

if (!"pacman" %in% rownames(installed.packages())) install.packages("pacman")

library(pacman)

pacman::p_load(tidyverse, SensoMineR, sensR, pwr)

```

------------------------------------------------------------------------

::: {.callout-caution collapse="true"}
## Expand to learn more about calling functions

In all code chunks throughout this script, you can receive additional help on each used function by clicking on its name (or via right-click and then opening in a new browser tab). Alternatively, when coding, we can see which arguments a function understands by pressing 'F1' while setting the cursor to the function's name.
:::

------------------------------------------------------------------------

Here is the *R* session info which gives you information on my machine, all loaded packages, and their version:

```{r  }

sessionInfo()


```

------------------------------------------------------------------------

# Finding an answer to case #1 - Discrimination testing -- The case of Jägermeister's grated deer horn

## Task 2 - Analyze whether the test results support the notion that consumers can detect the product differences between both variants.

Jägermeister was conducting an unspecified Duo-trio test for product differences with 200 regular consumers of Jägermeister. In such a test procedure, consumers are asked to compare two product variants (Jägermeister Original vs. Jägermeister Grated Deer Horn). A reference product is first served. Then, consumers have to decide which of two other product samples matches the reference product. The reference product is sometimes Jägermeister Original, and sometimes Jägermeister Grated Deer Horn. Also, the positions of the two product samples are counterbalanced across consumers following an experimental design.

The company was observing 117 (out of 200) correct matches within the test.

The package [sensR](https://cran.r-project.org/web/packages/sensR/) is providing functions to handle nearly all types of discrimination tests, including Duo-trio tests. We will use the function **discrim()**. This function allows us to specify many arguments (see help by pressing 'F1'). We will do so for

-   correct = the number of correct answers
-   total = total number of responses
-   conf.level = significance level (Type I error probability $\alpha$), usually 0.95 corresponding to 95%.
-   method = the discrimination protocol applied (see lecture slides for the various options)
-   statistic = The type of analysis strategy to apply for the data (whether one wants to use normal distribution or Chi² etc.)
-   test = Whether a test for similarity or difference should be obtained.

Below, we assign the results of our Discrimination test to a new object named 'duo_trio_test'. Then we call for its content.

```{r}

duo_trio_test <- discrim(
  correct= 117, 
  total= 200,
  conf.level = 0.95,
  method = "duotrio", 
  statistic = "score",
  test = "difference")


duo_trio_test

```

::: callout-tip
## Interpretation

As the results of the $\chi^{2}$-test is significant (`r round(duo_trio_test$p.value, digits = 3)`), we have to reject H~0~. Thus, consumers can reliably distinguish between the new and the old Jägermeister recipe. Of course this is not answering the question of whether the grated horn variant tastes better than Jägermeister Original.
:::

-   In the output above, *pc* means the percentage of correct discriminators (117/200).
-   pd stands for the estimated proportion of individuals in the (relevant) population that would detect the product difference. Which is in the case of a Duo-trio test: $pd=\frac{pc-1/3}{2/3}$. Note that the confidence interval for pd has an upper limit of `r round(duo_trio_test$coefficients[2, 4]*100, digits = 2)`%. Thus, in the worst case, the true proportion of discriminators is almost as high as 31%. 
-   The Thurstonian approach of transforming the number of correct answers into an estimate, called d-prime of the underlying (relative) sensory difference is an attempt to overcome the concepts of *pc* and *pd*, since these are dependent on the concrete test protocol one has applied (e.g., Triangle vs. 3-AFC tests). The higher the value the higher is the degree of difference between the two products that were tested.

------------------------------------------------------------------------






We use an ANOVA here.

## Calculate effect size Cohen's f

We have seen from our exercise that the program [G\*Power](http://www.psychologie.hhu.de/arbeitsgruppen/allgemeine-psychologie-und-arbeitspsychologie/gpower.html) [@faul2007] requires the effect size measure Cohen's f [@Cohen.1988]. The same holds for the [pwr](https://cran.r-project.org/web/packages/pwr/index.html) package [@pwr], which we will, again, use to conduct power analysis in *R*. Therefore, we first need to convert information provided by the *JSR* article into a sample estimate of f.

Information the article provides:

*"\[...\] and service value, M*<sub>scented</sub> = 3.69, SD = 1.37 versus M<sub>unscented</sub> = 3.05, SD = 1.38, F(1, 195) = 14.521, p \< .001, $\eta^{2}_{p}$ = .069, than those in the unscented condition, \[...\]"

From this, we can extract:

-   the effective net sample size (n-k)=195, thus n=197 since we compare 2 groups
-   The alternative effect size measure $\eta^{2}_{p}$, which is 0.069
-   The F-value, which is 14.521

This is all that we need to first calculate the observed effect size Cohen's f [@Cohen.1988]. According the Cohen [-@Cohen.1988, p. 281] $\eta^{2}_{p}$ can easily be converted to f by a simple formula: f= $\sqrt{\frac{\eta^{2}}{1-\eta^{2}}}$ Therefore, we need to solve $\sqrt{\frac{0.069}{1-0.069}}$

We achieve this by using the next code chunk. Within this code chunk, we use the *sqrt()* function (place the cursor in the function and press 'F1' to see help), which calculates the square root of a number. We feed this function with the value of $\eta^{2}_{p}$=0.069. We assign the results to an object that we call 'Cohen_f'.

In the next line, we call the object and simultaneously round the results to 4 digits. This is obtained by using the *round()* function.

```{r}

Cohen_f <- sqrt(0.069 / (1 - 0.069))

round(Cohen_f, digits = 4)

```

::: callout-tip
## We can see that the calculated effect size `r round(Cohen_f, digits = 4)` perfectly mirrors the one we have seen in the exercise slides using G\*Power.

A common classification for Cohen's f is: \[0.1 \| 0.25\[ - small effect, \[0.25 \| 0.4\[ - medium effect, and \[0.4 \| 1\] - large effect.
:::

------------------------------------------------------------------------

## Conduct A priori power analysis to search for minimum n

In the question, we are asked for $\beta$=5%, which corresponds to a statistical power of 95%.

To estimate a minimum sample size *n* for the replication, we apply the *pwr.anova.test()* function from the [pwr](https://cran.r-project.org/web/packages/pwr/index.html) package. This function needs us to provide 5 arguments to fill its parameters. These are (see help by pressing 'F1'):

-   k = The number of groups to compare (i.e., 2)
-   n = Number of observations (per group) and we are assuming that we will be able to allocate participants in a way that both groups are of equal size (called balanced)
-   f = Effect size Cohen's f
-   sig.level = Significance level (Type I error probability $\alpha$)
-   power = Power of test (1 minus Type II error probability)

The function, furthermore, assumes us to set one of these arguments to **NULL**. By doing so, we tell the function to use the remaining 4 parameters to search for the value of the fifth. In our case, we are searching for 'n', therefore, we set 'n=NULL'.

We assign the results of our power analysis to a new object named 'results'. Then we call for its content.

```{r results='asis'}

results <- pwr.anova.test(k = 2, n = NULL, f = Cohen_f, sig.level = 0.05, power = 0.95)

results

```

We can see that the calculated sample size per group `r results$n` only closely mirrors the one we have seen in G\*Power 3 [@faul2007] at n=89. We have to round upwards to end up with `r ceiling(results$n)`. For the total sample size, we just multiply by 2, which gives `r ceiling(results$n)+ceiling(results$n)`.

------------------------------------------------------------------------

## Visualize results

In a last step, we can visualize the relationship between the expected statistical power and different sample sizes.

For this purpose, we apply the *plot()* function with the 'results' object and a catchy label for the x-axes as arguments.

```{r}

plot(results, xlab = "sample size")

```

From this plot, we can alternatively extract the same information for sample size planning.

------------------------------------------------------------------------
